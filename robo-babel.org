#+TITLE: Travis's Emacs Configuration
#+OPTIONS: toc:4 h:4

* Configuration
** About this file
<<babel-init>>

The next evolution in emacs config technology

Defaults from the beginning

#+begin_src emacs-lisp
;; default to better frame titles
(setq frame-title-format
      "%b - emacs")

;; default to unified diffs
(setq diff-tsjswitches "-u")
#+end_src

** Emacs initialization
*** Package Setup
#+BEGIN_SRC emacs-lisp
      ;; Set path to dependencies
      (setq site-lisp-dir
            (expand-file-name "site-lisp" user-emacs-directory)) 

      (setq settings-dir
            (expand-file-name "settings" user-emacs-directory))

      (unless (package-installed-p 'use-package)
        (package-refresh-contents)
        (package-install 'use-package))

      (require 'use-package)

      ;; Set up load path
      (add-to-list 'load-path settings-dir)
      (add-to-list 'load-path site-lisp-dir)

      ;; Keep emacs Custom-settings in separate file
      (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
      (load custom-file)

      ;; Add external projects to load path
      (dolist (project (directory-files site-lisp-dir t "\\w+"))
        (when (file-directory-p project)
          (add-to-list 'load-path project)))

      ;; Are we on a mac?
      (setq is-mac (equal system-type 'darwin))

      ;; Setup environment variables from the user's shell.
      (when is-mac
        (use-package exec-path-from-shell :ensure t)
        (exec-path-from-shell-initialize))

      ;; Setup packages

      ;; Requires
      (use-package bm :ensure t)
      (use-package cl :ensure t)
      (use-package cl-lib :ensure t)
      (use-package color-theme :ensure t)
      (use-package company
        :diminish company-mode
        :ensure t)
      (use-package compile :ensure t)
      (use-package dash :ensure t)
      (use-package diminish :ensure t)
      (use-package dirtree :ensure t)
      (use-package discover :ensure t)
      (use-package discover-my-major
        :commands discover-my-major
        :init (bind-key "C-h C-m" 'discover-my-major)
        :ensure t)
      (use-package doom-themes :ensure t)
      (use-package doom-modeline
        :ensure t
        :defer t)
      (use-package flycheck 
        :ensure t
        :init
        (global-flycheck-mode t))
      (use-package git-messenger :ensure t)
      (use-package google-this
        :diminish google-this-mode
        :ensure t)
      (use-package goto-last-change :ensure t)
      (use-package guide-key
        :diminish guide-key-mode
        :ensure t)
      (use-package helm
        :config
        (require 'helm-org)
        :ensure t)
      (use-package highlight-symbol :ensure t)
      (use-package httprepl :ensure t)
      (use-package hungry-delete :ensure t)
      (use-package ido-ubiquitous :ensure t)
      (use-package key-chord :ensure t)
      (use-package magit :ensure t)
      (use-package neotree :ensure t)
      (use-package org-bullets
        :init
        (add-hook 'org-mode-hook 'org-bullets-mode)
        :ensure t)
      (use-package paradox :ensure t)
    ;;  (use-package persp-mode :ensure t)
     ;; (use-package persp-projectile :ensure t)
      (use-package prodigy :ensure t)
      (use-package project-explorer :ensure t)
      (use-package rainbow-delimiters :ensure t)
      (use-package rainbow-mode :ensure t)
      (use-package recentf :ensure t)
      ;; (use-package smart-mode-line :ensure t)
      (use-package smartparens
        :diminish smartparens-mode
        :ensure t)
      (use-package smex :ensure t)
      (use-package soap-client :ensure t)
      (use-package symon :ensure t)
      (use-package tls :ensure t)
      (use-package visual-regexp-steroids :ensure t)
      (use-package undo-tree
        :diminish undo-tree-mode
        :ensure t)
      (use-package yasnippet
        :diminish yas-minor-mode
        :ensure t)
#+end_src
** Functions
    Some of the things I have found that are handy or I have written up to make life easier

    Tidy is like an html lint, this function cleans up the buffer
#+BEGIN_SRC emacs-lisp

  (defun bf-pretty-print-xml-region (begin end)
    "Pretty format XML markup in region. You need to have nxml-mode
  http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
  this.  The function inserts linebreaks to separate tags that have
  nothing but whitespace between them.  It then indents the markup
  by using nxml's indentation rules."
    (interactive "r")
    (save-excursion
        (nxml-mode)
        (goto-char begin)
        (while (search-forward-regexp "\>[ \\t]*\<" nil t) 
          (backward-char) (insert "\n"))
        (indent-region begin end))
      (message "Ah, much better!"))

  (defun highlight-and-show()
    "Highlight a symbol and show all occurences"
    (interactive)
    (highlight-symbol-at-point)
    (highlight-symbol-occur))

  (global-set-key "\C-chs" 'highlight-and-show)

  (defun tr/search-text-next-prop (prop value)
    "Searches the text from point until it finds the property"
    (interactive)
    (let ((text-loc (next-property-change (point) (current-buffer))))
      (while (or (= text-loc (buffer-size))
                 (not (member value (get-text-property text-loc prop))))
        (setq text-loc (next-property-change text-loc (current-buffer))))
      (goto-char text-loc)))

  (defun tr/search-text-prev-prop (prop value)
    "Searches the text backwards from point until it finds the property"
    (interactive)
    (while (progn
             (goto-char (or (previous-single-property-change (point) prop (current-buffer)) (point)))
             (not (member value (get-text-property (point) prop))))))


  (defun gs/git-get-branch (path)
    (let ((default-directory path))
      (-> "git symbolic-ref -q --short HEAD" shell-command-to-string s-trim)))

  (defun gs/git-get-dir (path)
    (let ((default-directory path))
      (-> "git rev-parse --show-toplevel" shell-command-to-string s-trim)))

  (defun open-codeac-at-point ()
    (interactive)
    (let* ((repository-root-directory (vc-find-root (buffer-file-name) ".git"))
           (package-name (file-name-base (directory-file-name repository-root-directory)))
           (relative-file-path (file-relative-name (buffer-file-name) repository-root-directory))
           (current-commit (replace-regexp-in-string (rx (* (any " \t\n"))) ""
                                                     (shell-command-to-string "git rev-parse --short HEAD")))
           (codeac-url
            (concat "https://code.amazon.com/packages/" package-name
                    "/blobs/" current-commit
                    "/--/" relative-file-path
                    "#line-" (number-to-string (line-number-at-pos)))))
      (message codeac-url)
      (browse-url codeac-url)))

  (defun amz/generate-code-link (path)
    "Builds a link to the proper spot in code.amazon.com"
    (let ((path (f-relative path (gs/git-get-dir path)))
          (branch (gs/git-get-branch path))
          (package (f-filename (gs/git-get-dir path))))
      (format "https://code.amazon.com/packages/%s/blobs/heads/%s/--/%s#line-%d"
              package branch path (line-number-at-pos))))

  (defun amz/view-on-code (path)
    (interactive (list (buffer-file-name)))
    (browse-url (amz/generate-code-link path)))

  (defun amz/code-link-to-kill-ring ()
    (interactive)
    (kill-new (amz/generate-code-link)))

  (global-set-key "\C-ck" 'amz/code-link-to-kill-ring)

  (defun amz/post-review (team user)
    (interactive "sTeam:\nsUsername:")
    (let ((tD (if (> (length team) 0) team "GRCS-Reconciliation"))
          (uD (if (> (length user) 0) user "oaimihai")))
      (shell-command-to-string (format "post-review -u %s -i %s" tD uD))))
    
#+END_SRC  
** Global Variables
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
     (setq paradox-github-token '0af38642de4c23e8399e7849d875a7118308f322)
     (setq-default tab-width 4)

     (global-hl-line-mode t)
   #+END_SRC
*** Registers
    #+BEGIN_SRC emacs-lisp
      (set-register ?e (cons 'file "~/emacs/robo-babel.org"))
    #+END_SRC
** General Configuration
*** Ace Window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :commands ace-window
    :demand
    :config
    (key-chord-define-global "qp" 'ace-window)
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    :ensure t)

  (defun tr/swap-windows ()
    "Pick a window to swap to"
    (interactive)
    (ace-swap-window)
    (aw-flip-window))



#+END_SRC
*** AG - The Silver Searcher
Be sure to install the silver searcher
#+BEGIN_SRC bash
brew install the_silver_searcher
#+END_SRC

Now ensure the package is installed
#+BEGIN_SRC emacs-lisp
  (use-package ag
    :ensure t)
#+END_SRC
*** Auto Fill Mode

#+begin_src emacs-lisp
(setq-default fill-column 120)
#+end_src

*** Buffer Mangement

Function from Greg, used to quickly create new scratch buffers

#+BEGIN_SRC emacs-lisp
  (defun gs/create-new-scratch-buffer ()
    "This creates a new *scratch* buffer regardless of whether one
  exists. It then switches to it."
    (interactive)
    (let ((buf (generate-new-buffer "*scratch*")))
      (switch-to-buffer buf)
      (lisp-interaction-mode)))
  
  (global-set-key (kbd "C-c b b") 'gs/create-new-scratch-buffer)
#+END_SRC

Manage Buffers
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :ensure t
    :bind (("C-x C-b" . ibuffer))
    :config
    (setq ibuffer-saved-filter-groups
          (quote (("default"
                   ("dired" (mode . dired-mode))
                   ("org" (name . "^.*org$"))
                   ("web" (or (mode . web-mode) (mode . js2-mode)))
                   ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
                   ("programming" (or
                                   (mode . python-mode)
                                   (mode . c++-mode)
                                   (mode . go-mode)))
                   ("emacs" (or (name . "^\\*scratch\\*$") (name . "^\\*Messages\\*$")))))))
    (setq ibuffer-expert 1))
#+END_SRC

*** Clojure Refactor
**** Commands
Combine with the prefix, C-c C-f
This is it so far:

ad: add declaration for current top-level form
ai: add import to namespace declaration, then jump back
ar: add require to namespace declaration, then jump back (see optional setup)
au: add "use" (ie require refer all) to namespace declaration, then jump back
cc: cycle surrounding collection type
ci: cycle between if and if-not
cp: cycle privacy of defns and defs
dk: destructure keys
el: expand let
il: introduce let
mf: move one or more forms to another namespace, :refer any functions
ml: move to let
pc: run project cleaner functions on the whole project
pf: promote function literal or fn, or fn to defn
rf: rename file, update ns-declaration, and then query-replace new ns in project.
rl: remove-let, inline all variables and remove the let form
rr: remove unused requires
ru: replace all :use in namespace with :refer :all
sn: sort :use, :require and :import in the ns form
sp: Sort all dependency vectors in project.clj
sr: stop referring (removes :refer [] from current require, fixing references)
tf: wrap in thread-first (->) and fully thread
th: thread another expression
tl: wrap in thread-last (->>) and fully thread
ua: fully unwind a threaded expression
uw: unwind a threaded expression
Using refactor-nrepl, you also get:

am: add a missing libspec
ap: add a dependency to your project
cn: Perform various cleanups on the ns form
ef: Extract function
fu: Find usages
hd: Hotload dependency
rd: Remove (debug) function invocations
rs: Rename symbol

#+begin_src emacs-lisp
;; CLJ Refactor
(add-hook 'clojure-mode-hook
	  (lambda()
	    (clj-refactor-mode 1)
	    (paredit-mode 1)
	    (cljr-add-keybindings-with-prefix "C-c C-f")
	    ))
#+end_src

*** Company

#+begin_src emacs-lisp
  (global-company-mode t)
  (setq company-dabbrev-downcase nil)
  (setq company-idle-delay 0)
  (setq company-show-numbers t)
  (setq company-minimum-prefix-length 3)
  (setq company-require-match nil)

#+end_src
    
*** EyeBrowse
#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :diminish eyebrowse-mode
    :ensure t
    :config (progn
             (define-key eyebrowse-mode-map (kbd "M-1") 'eyebrowse-switch-to-window-config-1)
              (define-key eyebrowse-mode-map (kbd "M-2") 'eyebrowse-switch-to-window-config-2)
              (define-key eyebrowse-mode-map (kbd "M-3") 'eyebrowse-switch-to-window-config-3)
              (define-key eyebrowse-mode-map (kbd "M-4") 'eyebrowse-switch-to-window-config-4)
              (eyebrowse-mode t)
              (setq eyebrowse-new-workspace t)))
#+END_SRC
*** Emphasise-Buffer

First attempt at my own hand written customization, not just copied. Needs some work.

#+begin_src emacs-lisp
(fset 'emphasize-buffer
   "\C-u32\C-x}")
(global-set-key [f5] 'emphasize-buffer)
#+end_src

*** File backup

#+begin_src emacs-lisp
;; Backup file settigs
(setq
 backup-directory-alist '(("." . "~/.saves"))
 delete-old-versions -1
 version-control t
 vc-make-backup-files t)
#+end_src

(add-to-list 'sml/replacer-regexp-list '("^~/development/" ":DEV:") t)

*** Google this

#+begin_src emacs-lisp
(google-this-mode 1)
#+end_src

*** Guide-Key

Popup for key shortcuts

#+begin_src emacs-lisp
  (use-package guide-key
    :init
    (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-c"))
    (guide-key-mode 1)
    (setq guide-key/recursive-key-sequence-flag t)
    (setq guide-key/popup-window-position 'bottom))
#+end_src

*** Golang
Instructions for setting up emacs for golang are here: http://dominik.honnef.co/posts/2013/03/writing_go_in_emacs/

#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :init
    (add-hook 'go-mode-hook 'auto-complete-for-go)
    :ensure t)
#+END_SRC

Setup for flymake and flycheck: https://github.com/dougm/goflymake

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/gocode/src/github.com/dougm/goflymake")
  (require 'go-flymake)

  (add-to-list 'load-path "~/gocode/src/github.com/dougm/goflymake")
  (require 'go-flycheck)
#+END_SRC

Setup Go Autocomplete
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/gocode/src/github.com/nsf/gocode")
  (require 'go-autocomplete)
  (ac-config-default)
#+END_SRC

Go Eldoc
#+BEGIN_SRC emacs-lisp
  (use-package go-eldoc
    :init
    (go-eldoc-setup)
    :ensure t)
#+END_SRC

Format on save

#+BEGIN_SRC emacs-lisp
  (defun my-go-mode-hook()

    (setq gofmt-command "goimports")
    (add-hook 'before-save-hook 'gofmt-before-save)
    (if (not (string-match "go" compile-command))
        (set (make-local-variable 'compile-command)
             "go build -v && go test -v && go vet"))
    (local-set-key (kbd "M-.") 'godef-jump)
    (local-set-key (kbd "M-*") 'pop-tag-mark))

  (add-hook 'go-mode-hook 'my-go-mode-hook)

#+END_SRC
*** History

#+begin_src emacs-lisp
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
'(kill-ring
  search-ring
  regexp-search-ring))
#+end_src
    
*** Hungry delete

#+begin_src emacs-lisp
(global-hungry-delete-mode)
#+end_src

*** IDO mode - completion in many places
#+begin_src emacs-lisp
  ;;(ido-mode 1)
  ;;(ido-ubiquitous-mode 1)
  ;;(setq ido-enable-flex-matching t)
  ;;(setq ido-everywhere t)

#+end_src

If you use imenu to look at the functions in a file, this will give you ido mode in that

#+begin_src emacs-lisp
  (defun ido-goto-symbol (&optional symbol-list)
        "Refresh imenu and jump to a place in the buffer using Ido."
        (interactive)
        (unless (featurep 'imenu)
          (use-package imenu :ensure t))
        (cond
         ((not symbol-list)
          (let ((ido-mode ido-mode)
                (ido-enable-flex-matching
                 (if (boundp 'ido-enable-flex-matching)
                     ido-enable-flex-matching t))
                name-and-pos symbol-names position)
            (unless ido-mode
              (ido-mode 1)
              (setq ido-enable-flex-matching t))
            (while (progn
                     (imenu--cleanup)
                     (setq imenu--index-alist nil)
                     (ido-goto-symbol (imenu--make-index-alist))
                     (setq selected-symbol
                           (ido-completing-read "Symbol? " symbol-names))
                     (string= (car imenu--rescan-item) selected-symbol)))
            (unless (and (boundp 'mark-active) mark-active)
              (push-mark nil t nil))
            (setq position (cdr (assoc selected-symbol name-and-pos)))
            (cond
             ((overlayp position)
              (goto-char (overlay-start position)))
             (t
              (goto-char position)))))
         ((listp symbol-list)
          (dolist (symbol symbol-list)
            (let (name position)
              (cond
               ((and (listp symbol) (imenu--subalist-p symbol))
                (ido-goto-symbol symbol))
               ((listp symbol)
                (setq name (car symbol))
                (setq position (cdr symbol)))
               ((stringp symbol)
                (setq name symbol)
                (setq position
                      (get-text-property 1 'org-imenu-marker symbol))))
              (unless (or (null position) (null name)
                          (string= (car imenu--rescan-item) name))
                (add-to-list 'symbol-names name)
                (add-to-list 'name-and-pos (cons name position))))))))
  
  
  (global-set-key (kbd "C-c g s") 'ido-goto-symbol)
#+end_src 

*** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t)

  (use-package swiper
    :ensure try
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           ("C-c C-r" . swiper)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)))
#+END_SRC
*** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :config
    (avy-setup-default))
#+END_SRC
*** Key Bindings
**** Global
#+BEGIN_SRC emacs-lisp
  (global-set-key [f8] 'neotree-toggle)
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cml" 'magit-file-log)
  (define-key global-map (kbd "RET") 'newline-and-indent)

#+END_SRC
**** Endless toggle and launcher

Found these great global key bindings at endlessparentheses.com
Mnemonic example, "Emacs toggle column", C-x t c

#+begin_src emacs-lisp
  ;; Global keys
  (define-prefix-command 'endless/toggle-map)
  (define-key ctl-x-map "t" 'endless/toggle-map)
  
  (define-key endless/toggle-map "c" #'column-number-mode)
  (define-key endless/toggle-map "d" #'toggle-debug-on-error)
  (define-key endless/toggle-map "e" #'toggle-debug-on-error)
  (define-key endless/toggle-map "f" #'auto-fill-mode)
  (define-key endless/toggle-map "l" #'toggle-truncate-lines)
  (define-key endless/toggle-map "q" #'toggle-debug-on-quit)
  (define-key endless/toggle-map "t" #'endless/toggle-theme)

  ;;; Generalized version of `read-only-mode'.
  (define-key endless/toggle-map "r" #'dired-toggle-read-only)
  (autoload 'dired-toggle-read-only "dired" nil t)
  (define-key endless/toggle-map "w" #'whitespace-mode)
  
  ;; More from endless, say "Emacs launch calc", C-x l c
  (define-prefix-command 'launcher-map)
  ;; C-x l is `count-lines-page' by default. If you
  ;; use that, you can try s-l or <C-return>.
  (define-key ctl-x-map "l" 'launcher-map)
  (global-set-key (kbd "s-l") 'launcher-map)
  (define-key launcher-map "c" #'calc)
  (define-key launcher-map "d" #'ediff-buffers)
  (define-key launcher-map "f" #'find-dired)
  (define-key launcher-map "g" #'lgrep)
  (define-key launcher-map "G" #'rgrep)
  (define-key launcher-map "h" #'man) ; Help
  (define-key launcher-map "n" #'nethack)
  (define-key launcher-map "l" #'paradox-list-packages)
  (define-key launcher-map "s" #'eshell)
  (define-key launcher-map "t" #'proced) ; top
  (define-key launcher-map "C" #'tr/open-code-amazon-com)
  
  (defmacro run (exec)
    "Return a function that runs the executable EXEC."
    (let ((func-name (intern (concat "endless/run-" exec))))
      `(progn
         (defun ,func-name ()
           ,(format "Run the %s executable." exec)
           (interactive)
           (start-process "" nil ,exec))
         ',func-name)))
  
  (defmacro browse (url)
    "Return a function that calls `browse-url' on URL."
    (let ((func-name (intern (concat "endless/browse-" url))))
      `(progn
         (defun ,func-name ()
           ,(format "Browse to the url %s." url)
           (interactive)
           (browse-url ,url))
         ',func-name)))
  
  (define-key launcher-map "r" (browse "http://www.reddit.com/r/emacs/"))
  (define-key launcher-map "w" (browse "http://www.emacswiki.org/"))
  (define-key launcher-map "?" (browse "http://emacs.stackexchange.com/"))
  (define-key launcher-map "a" (browse "http://www.penny-arcade.com/"))
  (define-key launcher-map "x" (browse "http://www.xkcd.com/"))
  (define-key launcher-map "m" (browse "http://www.gizmag.com/"))
  (define-key launcher-map "g" (browse "http://www.gmail.com/"))
#+end_src

**** Magit
#+BEGIN_SRC emacs-lisp
  (defun my-magit-keys ()
    "Keys for my special functions"
    (local-set-key (kbd "C-c r") 'amz/post-review))

  (add-hook 'magit-mode-hook 'my-magit-keys)
#+END_SRC
*** Mode line format

I use smart mode line, mostly for ease of use, someday ill customize

#+begin_src emacs-lisp
  ;; Smart mode line
  ;;(sml/setup)
  ;;(sml/apply-theme 'dark)
  (doom-modeline-init)
#+end_src

*** Narrow-or-widen

#+begin_src emacs-lisp
(defun narrow-or-widen-dwim (p)
  "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
Intelligently means: region, org-src-block, org-subtree, or defun,
whichever applies first.
Narrowing to org-src-block actually calls `org-edit-src-code'.

With prefix P, don't widen, just narrow even if buffer is already
narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
        ((region-active-p)
         (narrow-to-region (region-beginning) (region-end)))
        ((derived-mode-p 'org-mode)
         ;; `org-edit-src-code' is not a real narrowing command.
         ;; Remove this first conditional if you don't want it.
         (cond ((ignore-errors (org-edit-src-code))
                (delete-other-windows))
               ((org-at-block-p)
                (org-narrow-to-block))
               (t (org-narrow-to-subtree))))
        (t (narrow-to-defun))))

(define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
;; This line actually replaces Emacs' entire narrowing keymap, that's
;; how much I like this command. Only copy it if that's what you want.
(define-key ctl-x-map "n" #'narrow-or-widen-dwim)
#+end_src

*** Org

#+begin_src emacs-lisp
  (load-library "find-lisp")
  (setq org-agenda-files (find-lisp-find-files "~/org" "\.org$"))
  (setq org-default-notes-file "~/org/refile.org")
  (setq org-tags-column -100)
  (setq org-src-fontify-natively t)

  (setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/agenda.org" "Tasks")
         "* TODO %? %^G\n")
        ("n" "Note" entry (file+headline "~/org/agenda.org" "Notes")
         "* %?\n")
        ("j" "Journal" entry (file+datetree "~/org/journal.org")
         "* %?\nEntered on %U\n %i")
        ("l" "Journal with link" entry (file+datetree "~/org/journal.org")
         "* %?\nEntered on %U\n  %i\n  %a")))

  (defun tr/org-agenda-add-status ()
    (let ((at-point (org-entry-get (point) "Status"))
          (status-map '(("Accept" . "✓")
                        ("Organizer" . "✓")
                       ("Tentative" . "⋯")
                       ("NoResponseReceived" . "⁇")
                       ("Unknown" . "⁉")
                       ("Decline" . "✕")))
          )
      (if (> (length at-point) 0)
          (cdr (assoc at-point status-map))
        " ")))

  (defun tr/org-agenda-add-location ()
    (org-entry-get (point) "Location"))

  (setq org-agenda-prefix-format
          (quote
           ((agenda . " %i%-12:c %?-12t% s%(tr/org-agenda-add-status) ")
            (timeline . "  % s")
            (todo . " %i %-12:c")
            (tags . " %i %-12:c")
            (search . " %i %-12:c"))))
   

  (setq org-todo-keywords
        '((sequence "TODO" "STARTED" "|" "DONE" "PUNT")))

  (setq org-todo-keyword-faces
        '(("TODO" . "blue") ("STARTED" . "orange")
          ("DONE" . "green") ("PUNT" . "purple")))

  (setq org-agenda-include-diary t)

  (setq org-tag-alist '(("region" . ?r) ("sprint" . ?s) ("home" . ?h) ("adhoc" . ?a) ("project" . ?p) ("catexp" . ?c)))

  (setq org-log-done 'time)

  (setq org-agenda-custom-commands
             '(("h" "Agenda and Home-related tasks"
                ((tags-todo "home")
                 ))
               ("o" "Agenda and Office-related tasks"
                ((agenda ""
                         ((org-agenda-span 1)
                          (org-agenda-toggle-time-grid)
                          (org-agenda-skip-function '(org-agenda-skip-entry-if 'regexp ":home:"))
                          ))
                 )
                )
               ("w" "Work TODO" tags-todo "+sprint|adhoc|project|catexp"
                ((org-agenda-sorting-strategy '(priority-down))))
               )
             )

  (add-hook 'org-mode-hook 'auto-fill-mode)

  (setq org-clock-into-drawer t)
  (setq org-hide-leading-stars t)
  (setq org-agenda-todo-ignore-scheduled t)

  (eval-after-load 'org
    '(define-key org-mode-map (kbd "C-c h s") 'helm-org-in-buffer-headings))


  ;;;;;;;;;;;;;;;;;;;;;;
  ;; EWS related work ;;
  ;;;;;;;;;;;;;;;;;;;;;;

  (defvar ews~launch-script "ews")

  (defvar ews~user-email "trrogers@a2z.com")

  (defvar ews~pass-file "~/.pword")

  (defun tr/action-meeting-invite (action)
    (interactive)
    (let* ((marker (org-get-at-bol 'org-marker))
           (buffer (marker-buffer marker))
           (pos (marker-position marker)))
      (with-current-buffer (current-buffer)
        (save-excursion
          (set-buffer buffer)
          (widen)
          (goto-char pos)
          (let ((id (org-entry-get (point) "ID")))
            (shell-command-to-string
             (format "%s -e %s -p %s -m %s -%s"
                     ews~launch-script
                     ews~user-email
                     ews~pass-file
                     id
                     action)))))))

  (defun tr/accept-meeting-invite ()
    (interactive)
    (tr/action-meeting-invite "a"))

  (defun tr/decline-meeting-invite ()
    (interactive)
    (tr/action-meeting-invite "d"))
    
  (eval-after-load 'org-agenda
    '(define-key org-agenda-mode-map (kbd "C-c M-a") 'tr/accept-meeting-invite)
    )
  (eval-after-load 'org-agenda
    '(define-key org-agenda-mode-map (kbd "C-c M-d") 'tr/decline-meeting-invite)
    )

#+end_src

*** Origami
This is gregs folding code, works pretty well, this is just the key chords I am using

#+begin_src emacs-lisp
;;  (key-chord-define-global "o[" 'origami-open-node-recursively)
;;  (key-chord-define-global "c]" 'origami-close-node)
;;  (key-chord-define-global "[]" 'origami-show-only-node)
#+end_src

*** Perl

#+begin_src emacs-lisp
  ;; Alias
  (defalias 'perl-mode 'cperl-mode)
  (setq cperl-invalid-face nil)

  (add-hook 'cperl-mode-hook 'flycheck-mode)

  (flycheck-define-checker perl
    "Checker for perl"
    :command ("/apollo/bin/env" "-e" "rtip-state-processor" "perl" "-w" "-c" source)
    :error-patterns
    ((error line-start (minimal-match (message))
            " at " (file-name) " line " line
            (or "." (and ", " (zero-or-more not-newline))) line-end))
    :modes (perl-mode cperl-mode)
    :next-checkers (perl-perlcritic))

  (custom-set-variables
       '(cperl-indent-parens-as-block t)
       '(cperl-indent-level 4))
  
  (add-to-list 'auto-mode-alist '("\\.t\\'" . cperl-mode))
#+end_src
    
*** Prodigy
#+BEGIN_SRC emacs-lisp
  (prodigy-define-service
    :name "EWS"
    :command "ews"
    :args '("-daemon" "-e trrogers@a2z.com" "-p /home/local/ANT/trrogers/.pword" "-f /home/local/ANT/trrogers/org/calendar.org")
    :tags '(work))

  (prodigy-define-service
    :name "Ninja Sync"
    :command "ninja-dev-sync"
    :tags '(work))
#+END_SRC
*** Projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :bind (("C-c p" . projectile-switch-project)
           ("C-c f" . projectile-find-file-dwim-other-window))
    :diminish projectile-mode
    :ensure t
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy))

  (use-package counsel-projectile
    :ensure t)

  (setq projectile-file-exists-remote-cache-expire nil)
#+END_SRC

This bit creates a view of all projects which also shells out to git to get some useful info about the project as far
as the repo is concerned

#+BEGIN_SRC emacs-lisp
  (define-derived-mode git-projectiles-mode special-mode "Projectiles")

  (define-key git-projectiles-mode-map (kbd "RET") 'tr-projectiles/open-in-magit)
  (define-key git-projectiles-mode-map (kbd "n") 'tr-projectiles/search-next)
  (define-key git-projectiles-mode-map (kbd "p") 'tr-projectiles/search-prev)
  (define-key git-projectiles-mode-map (kbd "f") 'tr-projectiles/find-file-at-point)
  (define-key git-projectiles-mode-map (kbd "k") 'tr-projectiles/remove-project-at-point)
  (define-key git-projectiles-mode-map (kbd "g") 'tr-projectiles/list-projects)
  (define-key git-projectiles-mode-map (kbd "r") 'tr-projectiles/code-review)

  (defface projectiles-header
    '((((class color) (background light))
        :foreground "black"
        :background "white"
        :weight bold
        :underline t)
       (((class color) (background dark))
        :foreground "azure"
        :background "SteelBlue4"
        :weight bold
        ))
      "Highlights the project header")

  (defface projectiles-body
    '((((class color) (background light))
       :foreground "black"
       :background "white")
      (((class color) (background dark))
       :foreground "DodgerBlue4"
       :background "LightSteelBlue2"
       ))
    "Highlights the body of the project")

  (defface local-changes
    '((((class color) (background dark))
       :background "IndianRed4"))
    "Highlights projects with work not checked in")

  (defface local-changes-body
    '((((class color) (background dark))
       :background "RosyBrown1"
       :foreground "IndianRed4"))
    "Highlights projects with work not checked in")

  (defun tr-projectiles/get-project-dir-at-point ()
    "returns the project directory at point, minus all font faces"
    (buffer-substring-no-properties (line-beginning-position) (line-end-position)))

  (defun tr-projectiles/get-text-faces (text face)
    (let ((default-directory text)
          (status (shell-command-to-string "git status --porcelain")))
      (cond ((string-match "fatal" status) '())
            ((> (length status) 0) face)
            (t '()))))

  (defun tr-projectiles/present-title (title)
    (concat "\n" (propertize (concat title "\n")
                             'face
                             `(,(tr-projectiles/get-text-faces title 'local-changes) projectiles-header))))

  (defun tr-projectiles/present-body (project body)
    (propertize body 'face `(,(tr-projectiles/get-text-faces project 'local-changes-body) projectiles-body)))


  (defun tr-projectiles/list-projects ()
    "Loops through all known projects from projectile and applies git-tldr to them"
    (interactive)
    (let ((bufname (get-buffer-create "*Projectiles*"))
          (cleaned (projectile-cleanup-known-projects))
          )
      (with-current-buffer bufname
        (let ((inhibit-read-only t))
          (erase-buffer)
          (mapc
           (lambda (project)
             (let ((default-directory project))
               (insert (tr-projectiles/present-title project))
               (insert (tr-projectiles/present-body project (shell-command-to-string "git tldr")))))
           (projectile-relevant-known-projects))
          (git-projectiles-mode)
          (pop-to-buffer bufname)))))

  (global-set-key "\C-ct" 'tr-projectiles/list-projects)

  (defun tr-projectiles/search-next ()
    "Hunts for the next header"
    (interactive)
    (tr/search-text-next-prop 'face 'projectiles-header))

  (defun tr-projectiles/search-prev ()
    "Hunts for the prev header"
    (interactive)
    (tr/search-text-prev-prop 'face 'projectiles-header))

  (defun tr-projectiles/open-in-magit ()
    "Opens the current line in magit"
    (interactive)
    (magit-status (tr-projectiles/get-project-dir-at-point)))

  (defun tr-projectiles/find-file-with-project (project-dir)
    "Opens a mini buffer with the files from the project"
    (interactive)
    (let ((default-directory project-dir))
      (projectile-find-file)))

  (defun tr-projectiles/find-file-at-point ()
    "Opens a mini buffer with the files in the project at point"
    (interactive)
    (tr-projectiles/find-file-with-project
     (tr-projectiles/get-project-dir-at-point)))

  ; needs to refresh the buffer once the removal is complete
  (defun tr-projectiles/remove-project (project-dir)
    "Removes the specified project from the list of known projects"
    (interactive)
    (let ((default-directory project-dir))
      (projectile-remove-current-project-from-known-projects)))

  (defun tr-projectiles/remove-project-at-point ()
    "Removes the project from the list of known"
    (interactive)
    (tr-projectiles/remove-project
     (tr-projectiles/get-project-dir-at-point))
    (tr-projectiles/list-projects))

  (defun tr-projectiles/code-review (team user)
    "Starts a code review at the specified project"
    (interactive "sTeam:\nsUser:")
    (let ((default-directory (tr-projectiles/get-project-dir-at-point)))
      (amz/post-review team user)))
#+END_SRC
*** Dump Jump
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :bind (("M-g o" . dumb-jump-go-other-window)
           ("M-g j" . dumb-jump-go)
           ("M-g x" . dumb-jump-go-prefer-external)
           ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :config (setq dumb-jump-selector 'ivy)
    :ensure t
    :init
    (dumb-jump-mode))
#+END_SRC
*** Rainbow Delimiters

#+BEGIN_SRC emacs-lisp
  (add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)
#+END_SRC

*** RecentF

Find a file from a list of your most recent files. Very handy because i look at the same files over and over and over
again all the time.

#+BEGIN_SRC emacs-lisp
  ;; get rid of `find-file-read-only' and replace it with something
  ;; more useful.
  (global-set-key (kbd "C-x C-r") 'ido-recentf-open)
  
  ;; enable recent files mode.
  (recentf-mode t)
  
  ; 50 files ought to be enough.
  (setq recentf-max-saved-items 50)
  
  (defun ido-recentf-open ()
    "Use `ido-completing-read' to \\[find-file] a recent file"
    (interactive)
    (if (find-file (ido-completing-read "Find recent file: " recentf-list))
        (message "Opening file...")
      (message "Aborting")))
  
#+END_SRC

*** Sane Defaults
#+BEGIN_SRC emacs-lisp
(setq truncate-lines t)
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Theme 

#+begin_src emacs-lisp
  ;;(load-file "~/.emacs.d/themes/almost-monokai.el")
  ;;  (color-theme-initialize)
  (setq doom-themes-enable-bold t
        doom-themes-ebable-italic t)

  (load-theme 'doom-tomorrow-night t)
  (doom-themes-neotree-config)
  (doom-themes-visual-bell-config)
#+end_src

*** Undo Tree mode - visualize your undos and branches

Use =C-x u= (=undo-tree-visualize=) to visually walk through the changes you've made, undo back to a certain pointing

#+begin_src emacs-lisp
  (use-package undo-tree
    :init
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)))
#+end_src

*** Visual Bookmarks

[[https://github.com/joodland/bm][Github page]]

#+begin_src emacs-lisp
  (setq bm-highlight-style 'bm-highlight-only-fringe)
  
  (global-set-key "\C-cbt" 'bm-toggle)
  (global-set-key "\C-cbn" 'bm-next)
  (global-set-key "\C-cbp" 'bm-previous)
  (global-set-key "\C-cba" 'bm-show-all)
#+end_src

*** Windmove

#+begin_src emacs-lisp
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))
#+end_src

*** Window configuration

#+begin_src emacs-lisp
  ;; Modes
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  
  (setq inhibit-startup-message t
        inhibit-startup-echo-area-message t)
#+end_src

*** Winner mode - undo and redo window configuration

#+begin_src emacs-lisp
(winner-mode 1)
#+end_src

*** Yasnippet
#+BEGIN_SRC emacs-lisp
  (yas-global-mode 1)
  
#+END_SRC
** Navigation
*** Pop to mark

Hande way of getting back to previous places

#+begin_src emacs-lisp
(bind-key "C-x p" 'pop-to-mark-command)
(setq set-mark-command-repeat-pop t)
#+end_src

*** Better window splitting

Copied from http://www.reddit.com/r/emacs/comments/25v0eo/you_emacs_tips_and_tricks/chldury

#+begin_src emacs-lisp
  (defun travis/vsplit-last-buffer (_)
    "Split the window vertically and display the previous buffer."
    (interactive "p")
    (split-window-vertically)
    (other-window 1 nil)
    (switch-to-next-buffer))
  (defun travis/hsplit-last-buffer (_)
    "Split the window horizontally and display the previous buffer."
    (interactive "p")
    (split-window-horizontally)
    (other-window 1 nil)
    (switch-to-next-buffer))
  (bind-key "C-x 2" 'travis/vsplit-last-buffer)
  (bind-key "C-x 3" 'travis/hsplit-last-buffer)
#+end_src

*** Key-chord

#+begin_src emacs-lisp
  (key-chord-mode 1)
  ;; faster shift
  ;; Ace jump
  (key-chord-define-global "aj" 'avy-goto-char)
  ;; Magit
  (key-chord-define-global "jk" 'magit-status)

  (key-chord-define-global "uu" 'undo)

      
#+end_src

*** Rotate-windows

#+BEGIN_SRC emacs-lisp
  (defun rotate-windows (arg)
    "Rotate your windows; use the prefix argument to rotate the other direction"
    (interactive "P")
    (if (not (> (count-windows) 1))
        (message "You can't rotate a single window!")
      (let* ((rotate-times (if (and (numberp arg) (not (= arg 0))) arg 1))
             (direction (if (or (< rotate-times 0) (equal arg '(4)))
                            'reverse
                          (lambda (x) x)))
             (i 0))
        (while (not (= rotate-times 0))
          (while  (< i (- (count-windows) 1))
            (let* ((w1 (elt (funcall direction (window-list)) i))
                   (w2 (elt (funcall direction (window-list)) (+ i 1)))
                   (b1 (window-buffer w1))
                   (b2 (window-buffer w2))
                   (s1 (window-start w1))
                   (s2 (window-start w2))
                   (p1 (window-point w1))
                   (p2 (window-point w2)))
              (set-window-buffer-start-and-point w1 b2 s2 p2)
              (set-window-buffer-start-and-point w2 b1 s1 p1)
              (setq i (1+ i))))

          (setq i 0
                rotate-times
                (if (< rotate-times 0) (1+ rotate-times) (1- rotate-times)))))))

  (defun window-split-toggle ()
    "Toggle between horizontal and vertical split with two windows."
    (interactive)
    (if (> (length (window-list)) 2)
        (error "Can't toggle with more than 2 windows!")
      (let ((func (if (window-full-height-p)
                      #'split-window-vertically
                    #'split-window-horizontally)))
        (delete-other-windows)
        (funcall func)
        (save-selected-window
          (other-window 1)
          (switch-to-buffer (other-buffer))))))

  (define-key ctl-x-4-map (kbd "t") 'rotate-windows)
  (define-key ctl-x-4-map (kbd "s") 'window-split-toggle)
#+END_SRC

    
    
